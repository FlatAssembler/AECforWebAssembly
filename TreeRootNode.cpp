#include "TreeNode.cpp"

class TreeRootNode : public TreeNode // Sets up the compilation context, rather
                                     // than compiling itself.
{
public:
  TreeRootNode() {
    text = "module"; // That's how the root node of the AST is called in
                     // WebAssembly and JavaScript.
  }
  AssemblyCode compile() {
    CompilationContext context;
    std::string globalDeclarations =
        R"(;;Generated by AECforWebAssembly ( https://github.com/FlatAssembler/AECforWebAssembly ).
(module
  (import "JavaScript" "memory" (memory 1)) ;;Assume that, in the JavaScript program linked to this
  ;;AEC program, there is an "extern"-ed bytearray of size 1 page (64KB) called "memory".
  ;;Have a better idea?
  (global $stack_pointer (import "JavaScript" "stack_pointer") (mut i32)) ;;The stack pointer being
  ;;visible from JavaScript will be useful when debugging the compiler.
)";
    auto allTheStrings = getStringsInSubnodes();
    for (auto string : allTheStrings) {
      context.globalVariables[string] = context.globalVariablePointer;
      if (string.back() != '"')
        string += '"';
      globalDeclarations += "\t(data 0 (i32.const " +
                            std::to_string(context.globalVariablePointer) +
                            ") " + string + ")\n";
      context.globalVariablePointer += string.size() - 1;
    }
    for (auto childNode : children) {
      if (basicDataTypeSizes.count(
              childNode.text)) { // Global variable declaration
        for (auto variableName : childNode.children) {
          if (!std::regex_match(variableName.text,
                                std::regex("^(_|[A-Z]|[a-z])\\w*\\[?$")) or
              AECkeywords.count(variableName.text)) {
            std::cerr
                << "Line " << variableName.lineNumber << ", Column "
                << variableName.columnNumber << ", Compiler error: \""
                << variableName.text
                << "\" is not a valid variable name! Aborting the compilation!"
                << std::endl;
            exit(1);
          }
          context.globalVariables[variableName.text] =
              context.globalVariablePointer;
          if (variableName.text.back() == '[')
            context.globalVariablePointer +=
                basicDataTypeSizes[childNode.text] *
                variableName.children[0]
                    .interpretAsACompileTimeIntegerConstant();
          else
            context.globalVariablePointer += basicDataTypeSizes[childNode.text];
          globalDeclarations +=
              ";;\"" + variableName.text +
              "\" is declared to be at the memory address " +
              std::to_string(context.globalVariables[variableName.text]) + "\n";
          auto iteratorOfTheAssignment = std::find_if(
              variableName.children.begin(), variableName.children.end(),
              [](TreeNode node) { return node.text == ":="; });
          if (iteratorOfTheAssignment !=
              variableName.children.end()) { // If there is an initial value
                                             // assigned to the global variable.
            auto assignment = iteratorOfTheAssignment->children[0];
            if (assignment.text == "{}") { // Array initializers.
              if (variableName.text.back() != '[') {
                std::cerr
                    << "Line " << assignment.lineNumber << ", Column "
                    << assignment.columnNumber
                    << ", Compiler error: Can't assign an array to a variable "
                       "that's not an array. Aborting the compilation!"
                    << std::endl;
                exit(1);
              }
              int address = context.globalVariables[variableName.text];
              for (auto field : assignment.children) {
                if (childNode.text == "Character")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfCharacter(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      ") ;;Hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      "\n";
                else if (childNode.text == "Integer16")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfInteger16(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      ") ;;Hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      "\n";
                else if (childNode.text == "Integer32")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfInteger32(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      ") ;;Hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      "\n";
                else if (childNode.text == "Integer64")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfInteger64(
                          field.interpretAsACompileTimeDecimalConstant()) +
                      ") ;;Hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeIntegerConstant()) +
                      "\n";
                else if (childNode.text == "Decimal32")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfDecimal32(
                          field.interpretAsACompileTimeDecimalConstant()) +
                      ") ;;IEEE 754 hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeDecimalConstant()) +
                      "\n";
                else if (childNode.text == "Decimal64")
                  globalDeclarations +=
                      "\t(data 0 (i32.const " + std::to_string(address) + ") " +
                      getCharVectorRepresentationOfDecimal64(
                          field.interpretAsACompileTimeDecimalConstant()) +
                      ") ;;IEEE 754 hex of " +
                      std::to_string(
                          field.interpretAsACompileTimeDecimalConstant()) +
                      "\n";
                else {
                  std::cerr << "Line " << field.lineNumber << ", Column "
                            << field.columnNumber
                            << ", Internal compiler error: Compiler got into a "
                               "forbidden state!"
                            << std::endl;
                  exit(1);
                }
                address += basicDataTypeSizes[childNode.text];
              }
            } else if (assignment.text.front() == '"') // String.
            {
              if (childNode.text != "CharacterPointer") {
                std::cerr << "Line " << iteratorOfTheAssignment->lineNumber
                          << ", Column "
                          << iteratorOfTheAssignment->columnNumber
                          << ", Compiler error: Strings can only be assigned "
                             "to variables of the type \"CharacterPointer\", I "
                             "hope it's clear why. Aborting the compilation!"
                          << std::endl;
                exit(1);
              }
              if (!context.globalVariables.count(assignment.text)) {
                std::cerr << "Line " << assignment.lineNumber << ", Column "
                          << assignment.columnNumber
                          << ", Internal compiler error: Memory for the string "
                          << assignment.text
                          << " hasn't been allocated before a pointer to it is "
                             "being compiled. Aborting the compilation before "
                             "std::map throws exception."
                          << std::endl;
                exit(1);
              }
              globalDeclarations +=
                  "\t(data 0 (i32.const " +
                  std::to_string(context.globalVariables[variableName.text]) +
                  ") " +
                  getCharVectorRepresentationOfDecimal32(
                      context.globalVariables.at(assignment.text)) +
                  ")\n";
            } else { // Simple assignment.
              if (childNode.text == "Character")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfCharacter(
                        assignment.interpretAsACompileTimeIntegerConstant()) +
                    ")\n";
              else if (childNode.text == "Integer16")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfInteger16(
                        assignment.interpretAsACompileTimeIntegerConstant()) +
                    ")\n";
              else if (childNode.text == "Integer32")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfInteger32(
                        assignment.interpretAsACompileTimeIntegerConstant()) +
                    ")\n";
              else if (childNode.text == "Integer64")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfInteger64(
                        assignment.interpretAsACompileTimeIntegerConstant()) +
                    ")\n";
              else if (childNode.text == "Decimal32")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfDecimal32(
                        assignment.interpretAsACompileTimeDecimalConstant()) +
                    ")\n";
              else if (childNode.text == "Decimal64")
                globalDeclarations +=
                    "\t(data 0 (i32.const " +
                    std::to_string(context.globalVariables[variableName.text]) +
                    ") " +
                    getCharVectorRepresentationOfDecimal64(
                        assignment.interpretAsACompileTimeDecimalConstant()) +
                    ")\n";
              else {
                std::cerr << "Line " << assignment.lineNumber << ", Column "
                          << assignment.columnNumber
                          << ", Internal compiler error: Compiler got into a "
                             "forbidden state!"
                          << std::endl;
                exit(1);
              }
            }
          }
        }
      } else {
        std::cerr << "Line " << childNode.lineNumber << ", Column "
                  << childNode.columnNumber
                  << ", Compiler error: No rule for compiling the token \""
                  << childNode.text << "\", aborting the compilation!"
                  << std::endl;
        exit(1);
      }
    }
    globalDeclarations += ")"; // End of the "module" S-expression.
    return AssemblyCode(globalDeclarations);
  }
  AssemblyCode compile(CompilationContext context) {
    std::cerr << "Internal compiler error: Some part of the compiler attempted "
                 "to recursively call the compiler from the beginning (leading "
                 "to an infinite loop), quitting now!"
              << std::endl;
    exit(1);
    return AssemblyCode(
        "()"); // So that the compiler doesn't throw a bunch of warnings about
               // the control reaching the end of a non-void function.
  }
  AssemblyCode compileAPointer(CompilationContext context) {
    std::cerr << "Internal compiler error: Some part of the compiler attempted "
                 "to get the assembly of the pointer of a module, which "
                 "doesn't make sense. Quitting now!"
              << std::endl;
    exit(1);
    return AssemblyCode("()");
  }
  int interpretAsACompileTimeIntegerConstant() {
    std::cerr
        << "Some part of the compiler attempted to convert a module to the "
           "compile time constant, which makes no sense. Quitting now!"
        << std::endl;
    exit(1);
    return 0;
  }
};
