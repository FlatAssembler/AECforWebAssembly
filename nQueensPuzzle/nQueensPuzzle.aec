/*
 * My solution to the n-queens puzzle, one of the classical problems of the
 * structural programming. It asks in how many ways you can arrange n chess
 * queens on an n-times-n chessboard without breaking the rules that no two
 * chess queens can be in the same row, column or diagonal.
 */

// Import some functions we need to communicate with the outside world from
// JavaScript...
Function printString(PointerToCharacter str)
  Which Returns Nothing Is External;
Function clearScreen() Which Returns Nothing Is External;
Function shouldWePrintChessBoards() Which Returns Integer32 Is External;

// Declare the "Queen" structure and write relevant functions.
Structure Queen Consists Of
  Integer32 row, column;
EndStructure

Function areQueensInTheSameColumn(PointerToQueen first, PointerToQueen second)
  Which Returns Integer32 Does
    Return first->column = second->column;
EndFunction

Function areQueensInTheSameRow(PointerToQueen first, PointerToQueen second)
  Which Returns Integer32 Does
    Return first->row = second->row;
EndFunction

Function areQueensOnTheSameDiagonal(PointerToQueen first,
                                    PointerToQueen second)
  Which Returns Integer32 Does
    Return first->row + first->column = second->row + second->column or
           first->row - first->column = second->row - second->column;
EndFunction

Function areQueensAttackingEachOther(PointerToQueen first,
                                     PointerToQueen second)
  Which Returns Integer32 Does
    Return areQueensInTheSameRow(first, second) or
           areQueensInTheSameColumn(first, second) or
           areQueensOnTheSameDiagonal(first, second);
EndFunction

// Let's write a structure representing an array of queens...
Structure ChessBoard Consists Of
  Integer32 length;
  Queen queens[12]; // There are too many solutions for over 12 queens.
EndStructure

Function chessBoardContainsThatQueen(PointerToChessBoard chessBoard,
                                     PointerToQueen queen)
                                      Which Returns Integer32 Does
  Integer32 i := 0;
  While i < chessBoard->length Loop
    If chessBoard->queens[i].column = queen->column and
       chessBoard->queens[i].row    = queen->row    Then
      Return 1;
    EndIf
    i += 1;
  EndWhile
  Return 0;
EndFunction

// Now, let's forward-declare the functions we will write later.
// Putting them here would make the code less legible.
Function validatePartialSolutionAndTryToExtend(PointerToChessBoard chessBoard,
                                               Integer32 n)
	 Which Returns Integer32 Is Declared;

Function convertIntegerToString(PointerToCharacter str,
                                Integer32 n)
  Which Returns Nothing Is Declared;

Function strcat(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Is Declared;

Function strlen(PointerToCharacter str) Which Returns Integer32 Is Declared;

// Let's write the function that JavaScript is supposed to call...
Function nQueensPuzzle(Integer32 n) Which Returns Integer32 Does
  clearScreen();
  If not(1 <= n <= 12) Then
    printString("Please enter a number between 1 and 12!");
    Return -1;
  EndIf
  InstantiateStructure ChessBoard chessBoard;
  Character stringToBePrinted[64] := {0};
  PointerToCharacter stringToBePrinted := AddressOf(stringToBePrinted[0]);
  strcat(stringToBePrinted, "Solving the n-queens puzzle for ");
  convertIntegerToString(stringToBePrinted + strlen(stringToBePrinted),
                         n);
  strcat(stringToBePrinted,":\n");
  printString(stringToBePrinted);
  Integer32 result := validatePartialSolutionAndTryToExtend(AddressOf(chessBoard), n);
  stringToBePrinted[0] := 0;
  strcat(stringToBePrinted, "Found ");
  convertIntegerToString(stringToBePrinted + strlen(stringToBePrinted),
                         result);
  strcat(stringToBePrinted, " solutions!");
  printString(stringToBePrinted);
  Return result;
EndFunction

// I guess moving this code out of "validatePartialSolutionAndTryToExtend"
// makes the code more legible.
Function printAsASolution(PointerToChessBoard chessBoard)
  Which Returns Nothing Does
    Character stringToBePrinted[64] := {0};
    Character stringToBeAdded[8];
    Integer32 i := 0;
    While i < chessBoard->length Loop
      stringToBeAdded[0] := 'A' + chessBoard->queens[i].column;
      convertIntegerToString(AddressOf(stringToBeAdded[1]),
                             chessBoard->queens[i].row + 1);
      strcat(AddressOf(stringToBeAdded[0]), " ");
      strcat(AddressOf(stringToBePrinted[0]),
             AddressOf(stringToBeAdded[0]));
      i += 1;
    EndWhile
    strcat(AddressOf(stringToBePrinted[0]), "\n");
    printString(AddressOf(stringToBePrinted[0]));
    If shouldWePrintChessBoards() Then
        stringToBePrinted[0] := 0;
        PointerToCharacter stringToBePrinted := AddressOf(stringToBePrinted[0]);
        strcat(stringToBePrinted, "  +");
        i := 0;
        While i < chessBoard->length Loop
          strcat(stringToBePrinted, "-+");
          i += 1;
        EndWhile
        strcat(stringToBePrinted, "\n");
        printString(stringToBePrinted);
        i := chessBoard->length;
        While i > 0 Loop
          stringToBePrinted[0] := 0;
          // Align the row numbers to the right.
          If i < 10 Then
            strcat(stringToBePrinted, " ");
          EndIf
          convertIntegerToString(stringToBePrinted + strlen(stringToBePrinted), i);
          strcat(stringToBePrinted, "|");
          Integer32 j := 0;
          While j < chessBoard->length Loop
            InstantiateStructure Queen newQueen;
            newQueen.column :=     j;
            newQueen.row    := i - 1;
            strcat(stringToBePrinted,
                   chessBoardContainsThatQueen(chessBoard, AddressOf(newQueen))?
                   "Q|":
                   mod(i + j - 1, 2)?
                   " |": // White field.
                   "*|"  // Black field.
            );
            j += 1;
          EndWhile
          strcat(stringToBePrinted, "\n");
          printString(stringToBePrinted);
          stringToBePrinted[0] := 0;
          strcat(stringToBePrinted, "  +");
          j := 0;
          While j < chessBoard->length Loop
            strcat(stringToBePrinted, "-+");
            j += 1;
          EndWhile
          strcat(stringToBePrinted, "\n");
          printString(stringToBePrinted);
          i -= 1;
        EndWhile
        stringToBePrinted[0] := 0;
        PointerToCharacter stringToBeAdded := AddressOf(stringToBeAdded[0]);
        stringToBeAdded[2] := 0;
        stringToBeAdded[0] := ' ';
        strcat(stringToBePrinted, "  ");
        i := 0;
        While i < chessBoard->length Loop
          stringToBeAdded[1] := 'A' + i;
          strcat(stringToBePrinted, stringToBeAdded);
          i += 1;
        EndWhile
        strcat(stringToBePrinted, "\n");
        printString(stringToBePrinted);
    EndIf
EndFunction

// Now, let's implement the brute-force algorithm.
Function validatePartialSolutionAndTryToExtend // A name suggested by a Reddit user called tobega:
// https://www.reddit.com/r/ProgrammingLanguages/comments/1ay30y8/comment/krwdde9/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
                                               (PointerToChessBoard chessBoard,
                                               Integer32 n) 
					       Which Returns Integer32 Does
  // First, do some sanity checks useful for debugging...
  If chessBoard->length > n Then
    printString("Bug: Chessboard length too large!");
    Return 0;
  EndIf
  Integer32 i := 0, j := 0;
  While i < chessBoard->length Loop
    If chessBoard->queens[i].column < 0 or
       chessBoard->queens[i].row    < 0 or
       chessBoard->queens[i].column > n or
       chessBoard->queens[i].row    > n Then
      printString("Bug: Corrupt chessboard!");
      Return 0;
    EndIf
    i += 1;
  EndWhile
  // Check if there is a contradiction (queens attacking
  // each other) in what we have thus far...
  i := j := 0;
  While i < chessBoard->length Loop
    j := i + 1;
    While j < chessBoard->length Loop
      If not(i = j) and areQueensAttackingEachOther(
                          AddressOf(chessBoard->queens[i]),
                          AddressOf(chessBoard->queens[j])
                        ) Then
        Return 0;
      EndIf
      j += 1;
    EndWhile
    i += 1;
  EndWhile
  // Check if this is a solution...
  If chessBoard->length = n Then
    printAsASolution(chessBoard);
    Return 1;
  EndIf
  // If this is not a complete solution, but there are no contradictions
  // in it, branch the recursion into searching for complete solutions
  // based on this one.
  Integer32 result := 0;
  i := 0;
  While i<n Loop
    InstantiateStructure ChessBoard newChessBoard := ValueAt(chessBoard);
    newChessBoard.length += 1;
    newChessBoard.queens[chessBoard->length].column := chessBoard->length;
    newChessBoard.queens[chessBoard->length].row := i;
    result += validatePartialSolutionAndTryToExtend(AddressOf(newChessBoard), n);
    i += 1;
  EndWhile
  Return result;
EndFunction

// Now go the helper functions related to string manipulation,
// copied from the Dragon Curve program. They are named the same
// as the corresponding functions in the standard C library.
Function strlen(PointerToCharacter str) Which Returns Integer32 Does
     Integer32 length := 0;
     While ValueAt(str + length) Loop
         length := length + 1;
     EndWhile
     Return length;
EndFunction

Function strcpy(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Does
    While ValueAt(src) Loop
        ValueAt(dest) := ValueAt(src);
        dest          :=     dest + 1;
        src           :=      src + 1;
     EndWhile
    ValueAt(dest) := 0;
EndFunction

Function strcat(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Does
    strcpy(dest + strlen(dest), src);
EndFunction

Function reverseString(PointerToCharacter string) Which Returns Nothing Does
    PointerToCharacter pointerToLastCharacter := string + strlen(string) - 1;
    While pointerToLastCharacter - string > 0 Loop
        Character tmp                   := ValueAt(string);
        ValueAt(string)                 := ValueAt(pointerToLastCharacter);
        ValueAt(pointerToLastCharacter) := tmp;
        string                          := string + 1;
        pointerToLastCharacter          := pointerToLastCharacter - 1;
    EndWhile
EndFunction

Function convertIntegerToString(PointerToCharacter string,
                                Integer32 number)
    Which Returns Nothing Does
    Integer32 isNumberNegative := 0;
    If number < 0 Then
        number           := -number;
        isNumberNegative :=       1;
    EndIf
    Integer32 i := 0;
    While number > 9 Loop
        ValueAt(string + i) := '0' + mod(number, 10);
        number              :=           number / 10;
        i                   :=                 i + 1;
    EndWhile
    ValueAt(string + i) := '0' + number;
    i                   :=        i + 1;
    If isNumberNegative Then
        ValueAt(string + i) :=   '-';
        i                   := i + 1;
    EndIf
    ValueAt(string + i) := 0;
    reverseString(string);
EndFunction
