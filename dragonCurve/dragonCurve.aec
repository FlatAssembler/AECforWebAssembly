/*
 * This will be my attempt to build a graphical application with AEC,
 * specifically, one that will draw a discrete mathematical curve using SVG.
 * A few years ago, I've made a similar program in JavaScript
 * ( https://flatassembler.github.io/fraktal.html ). I've never before
 * attempted to write a program that will draw the Dragon Curve in AEC,
 * because there is no obvious way to do it using console graphics (and my
 * old AEC compiler, targeting x86, was basically limited to console
 * graphics). Also, to do that, I'll need to do a bit of string manipulation,
 * and the old version of AEC didn't support string manipulation at all (The
 * only data types available were Decimal32 and Decimal32Array, and there
 * were no functions. It's because I wanted the code my compiler generates
 * not to favor one operating system over another, and x86 OS-es do those
 * things very differently). This version of AEC is about at good at string
 * manipulation as C is without a standard library. JavaScript has many
 * useful string manipulation functions, however, since they are actually
 * methods of the "String" class, there is no standardized way to call them
 * from a WebAssembly program, even though it's running on JavaScript
 * Virtual Machine. That's because WebAssembly standard tries to be agnostic
 * about other programming languages running on the same virtual machine,
 * which may be a good thing (Why make it necessary for a JavaScript program
 * to be running on the same virtual machine for any program that's compiled
 * to WebAssembly to make sense?).
 */

// Let's import some JavaScript functions...
Function drawLine(Integer32 x1,
                  Integer32 y1,
                  Integer32 x2,
                  Integer32 y2,
                  PointerToCharacter color,
                  Integer32 lineWidth) Which Returns Nothing Is External;

Function applyTurtleTransformation(PointerToCharacter svgDirective)
    Which Returns Nothing Is External; // We won't use the turtle for actual
                                       // drawing, but we will move it and
                                       // rotate it.

Integer32 directionX[4] : = {0, 1, 0, -1},
          directionY[4] : = {-1, 0, 1, 0},
          currentX : = 10,
          currentY : = 250 + 490 - 410, // When set on 250, the
                                        // turtle reaches 410 and
                                        // then turns back (I know
                                        // this by experimenting).
          currentDirection : = 0,
          lineLength : = 5,
          lineWidth : = 2,
          currentStep : = 0;

Character path[16384], reversedPath[16384];

// Again, we need to implement string manipulation functions. Like I've said,
// even though this program will be running on JavaScript Virtual Machine, it
// can't call the methods of the JavaScript "String" class.
Function strlen(PointerToCharacter str) Which Returns Integer32 Is Declared;
Function strcpy(PointerToCharacter dest, 
                PointerToCharacter src) Which Returns Nothing Is Declared;
Function reverseString(PointerToCharacter string) 
                Which Returns Nothing Is Declared;
Function strcat(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Is Declared;
Function convertIntegerToString(PointerToCharacter string, Integer32 number)
    Which Returns Integer32 Is Declared;

// This is the function that's supposed to be called by JavaScript as soon
// as it is ready.
Function init() Which Returns Nothing Does
    PointerToCharacter path : = AddressOf(path[0]);
    PointerToCharacter reversedPath : = AddressOf(reversedPath[0]);
    strcpy(path, "R");
    Integer32 counter : = 0;
    While strlen(path) < 8192 Loop
        strcpy(reversedPath, path);
        If mod(counter, 4) = 0 Then
            reverseString(reversedPath);
        EndIf
        strcat(path, reversedPath);
        strcat(path, not(mod(counter, 4)) ? "L" : "LLL");
        counter : = counter + 1;
    EndWhile
EndFunction

// This function is supposed to be periodically called by JavaScript:
Function step() Which Returns Nothing Does
    If not(path[currentStep] = 0)
        and 0 < currentX < 500
        and 0 < currentY < 500 Then
        Integer32 nextX : = currentX + directionX[currentDirection] * lineLength,
                  nextY : = currentY + directionY[currentDirection] * lineLength;
        drawLine(
            currentX,
            currentY,
            nextX,
            nextY,
            currentStep = 0 ? "lightYellow"
                : path[currentStep] = 'R' ? "red"
                    : path[currentStep] =
                        'L' ? "lightBlue" : "lightYellow",
            lineWidth
        );
        currentX : = nextX;
        currentY : = nextY;
        If path[currentStep] = 'R' Then
            currentDirection : = mod(currentDirection + 1, 4);
        ElseIf not(currentDirection = 0) and path[currentStep] = 'L' Then
            currentDirection : = currentDirection - 1;
        ElseIf path[currentStep] = 'L' Then
            currentDirection : = 3;
        EndIf
        Integer32 tmp; // I had no idea WebAssembly would behave that way,
                       // that the assembler will complain about not storing
                       // the result of a function. This is very different
                       // from x86 assembly. So, I modified the compiler
                       // to warn about that.
        currentStep : = currentStep + 1;
        Character turtleTranformation[64] : = {0};
        PointerToCharacter turtleTranformation 
                           : = AddressOf(turtleTranformation[0]);
        strcat(turtleTranformation, "translate(");
        tmp : = convertIntegerToString(
            turtleTranformation + strlen(turtleTranformation),
            currentX
        );
        strcat(turtleTranformation, " ");
        tmp : = convertIntegerToString(
            turtleTranformation + strlen(turtleTranformation),
            currentY
        );
        strcat(turtleTranformation, ") rotate(");
        tmp : = convertIntegerToString(
            turtleTranformation + strlen(turtleTranformation),
            currentDirection * 90
        );
        strcat(turtleTranformation, ")");
        applyTurtleTransformation(turtleTranformation);
    EndIf
EndFunction

Function strlen(PointerToCharacter str) Which Returns Integer32 Does 
    // We can't implement this recursively, like we did in earlier AEC
    // programs, because we will be dealing with large strings which will
    // cause stack overflow.
    Integer32 length : = 0;
    While ValueAt(str + length) Loop
        length : = length + 1;
    EndWhile
    Return length;
EndFunction

Function strcpy(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Does
    While ValueAt(src) Loop
        ValueAt(dest) : = ValueAt(src);
        dest : = dest + 1;
        src : = src + 1;
    EndWhile
    ValueAt(dest) : = 0;
EndFunction

Function reverseString(PointerToCharacter string) Which Returns Nothing Does
    PointerToCharacter pointerToLastCharacter : = string + strlen(string) - 1;
    While pointerToLastCharacter - string > 0 Loop
        Character tmp : = ValueAt(string);
        ValueAt(string) : = ValueAt(pointerToLastCharacter);
        ValueAt(pointerToLastCharacter) : = tmp;
        string : = string + 1;
        pointerToLastCharacter : = pointerToLastCharacter - 1;
    EndWhile
EndFunction

Function strcat(PointerToCharacter dest,
                PointerToCharacter src) Which Returns Nothing Does
    strcpy(dest + strlen(dest), src);
EndFunction

Function convertIntegerToString(PointerToCharacter string, Integer32 number)
    Which Returns Integer32 Does // Returns the length of the string.
    Integer32 isNumberNegative : = 0;
    If number < 0 Then
        number : = -number;
        isNumberNegative : = 1;
    EndIf
    Integer32 i : = 0;
    While number > 9 Loop
        ValueAt(string + i) : = '0' + mod(number, 10);
        number : = number / 10;
        i : = i + 1;
    EndWhile
    ValueAt(string + i) : = '0' + number;
    i : = i + 1;
    If isNumberNegative Then
        ValueAt(string + i) : = '-';
        i : = i + 1;
    EndIf
    ValueAt(string + i) : = 0;
    reverseString(string);
    Return i;
EndFunction