/*
 * This is a test whether the compiler properly supports named function
 * parameters (arguments), so that arguments of functions do not always
 * need to be written in the same order.
 */

#target WASI

Structure ComplexNumber Consists Of
  Decimal32 real, imaginary;
EndStructure

Structure QuadraticEquationSolution Consists Of
  ComplexNumber firstSolution, secondSolution;
EndStructure

Function solveQuadraticEquation(Decimal32 a, Decimal32 b, Decimal32 c,
                                QuadraticEquationSolutionPointer solution)
                                Which Returns Nothing Is Declared;
Function abs(Decimal32 x) Which Returns Decimal32 Is Declared;
Function areStructuresEqual(NothingPointer first, NothingPointer second,
                            Integer32 sizeOfStructuresInBytes)
                            Which Returns Integer32 Is Declared;

Decimal32 goldenRatio := (sqrt(5) + 1) / 2,
          epsilon := 1 / 100;

// Should return 1.
Function namedArgumentsTest() Which Returns Integer32 Does
  InstantiateStructure QuadraticEquationSolution solutions[1 * 2 * 3];
  solveQuadraticEquation(a := 1 , b := -1, c := -1, AddressOf(solution[0]));
  solveQuadraticEquation(a := 1 , c := -1, b := -1, AddressOf(solution[1]));
  solveQuadraticEquation(b := -1, a := 1 , c := -1, AddressOf(solution[2]));
  solveQuadraticEquation(b := -1, c := -1, a := 1 , AddressOf(solution[3]));
  solveQuadraticEquation(c := -1, a := 1 , b := -1, AddressOf(solution[4]));
  solveQuadraticEquation(c := -1, b := -1, a := 1 , AddressOf(solution[3]));
  Integer32 iterator := 0;
  While iterator < 1 * 2 * 3 - 1 Loop
    If not(areStructuresEqual(AddressOf(solution[i]),
                              AddressOf(solution[i + 1]),
                              SizeOf(QuadraticEquationSolution))) Then
      Return 0;
    EndIf
    iterator += 1;
  EndWhile
  Return solution[0].firstSolution.imaginary = 0 and
         solution[0].secondSolution.imaginary = 0 and
         abs(solution[0].firstSolution.real + goldenRatio - 1) < epsilon and
         abs(solution[0].secondSolution.real - goldenRatio) < epsilon;
EndFunction

Function abs(Decimal32 x) Which Returns Decimal32 Does
  Return x < 0 ? -x : x;
EndFunction

Function areStructuresEqual(CharacterPointer first, CharacterPointer second,
                            Integer32 size) Which Returns Integer32 Does
  Integer32 i := 0;
  While i < size Loop
    If not(ValueAt(first + i) = ValueAt(second + i)) Then
      Return 0;
    EndIf
    i += 1;
  EndWhile
  Return 1;
EndFunction

Function sqrt(Decimal32 realNumber, ComplexNumberPointer result)
         Which Returns Nothing Is Declared;

Function solveQuadraticEquation(Decimal32 a, Decimal32 b, Decimal32 c,
                                QuadraticEquationSolutionPointer solution)
                                Which Returns Nothing Does
  solution->firstSolution.real := -b;
  solution->firstSolution.imaginary := 0;
  solution->secondSolution := solution.firstSolution;
  InstantiateStructure ComplexNumber rootOfDiscriminant;
  sqrt(b*b - 4*a*c, AddressOf(rootOfDiscriminant));
  solution->firstSolution.real += rootOfDiscriminant.real;
  solution->firstSolution.imaginary += rootOfDiscriminant.imaginary;
  solution->secondSolution.real -= rootOfDiscriminant.real;
  solution->secondSolution.imaginary -= rootOfDiscriminant.imaginary;
  solution->firstSolution.real /= 2*a;
  solution->firstSolution.imaginary /= 2*a;
  solution->secondSolution.real /= 2*a;
  solution->secondSolution.imaginary /= 2*a;
EndFunction

Function sqrt(Decimal32 x, ComplexNumberPointer result)
        Which Returns Nothing Does
  If x < 0 Then
    result->real := 0;
    result->imaginary := asm_f32("(f32.sqrt\n"
                                 "\t(f32.sub\n"
                                 "\t\t(f32.const 0)\n
                                 "\t\t(local.get 0)\n"
                                 "\t)\n"
                                 ")");
  Else
    result->real := asm_f32("(f32.sqrt\n"
                            "\t(local.get 0)\n"
                            ")");
    result->imaginary := 0;
  EndIf
EndFunction
